declare class Sprite {
    constructor(x?: number, y?: number, 
                w?: number, h?: number, 
                collider?: "dynamic" | "static" | "kinematic" | "none" | "d" | "s" | "k" | "n");
    collider: "dynamic" | "static" | "kinematic" | "none" | "d" | "s" | "k" | "n";
    allowSleeping: boolean;
    bearing: number;
    drag: number;
    direction: number;
    halfHeight: number;
    halfWidth: number;
    height: number;
    mass: number;
    rotation: number;
    rotationDrag: number; 
    speed: number;
    velocity: p5.Vector;
    width: number;

    applyForce(amount: number, origin?: Vector): void;
}

declare class Group {
    constructor();

    Sprite: new (
        x?: number, y?: number,
        w?: number, h?: number,
        collider?: "dynamic" | "static" | "kinematic" | "none" | "d" | "s" | "k" | "n"
    ) => Sprite;

    Group: new () => Group;
    
    bearing: number;
    drag: number;
    direction: number;
    speed: number | boolean;

    applyForce(amount: number, origin?: Vector): void;
}

declare class GlueJoint {
    constructor(spriteA: Sprite, spriteB: Sprite);
}

declare class WheelJoint {
    constructor(spriteA: Sprite, spriteB: Sprite);
}

declare class InputDevice {
    constructor();
    held(inp: string): boolean;
    holding(inp: string): number;
    holds(inp: string): boolean;
    pressed(inp: string): boolean;
    presses(inp: string): boolean;
    pressing(inp: string): number;
    released(inp: string): boolean;
}
declare class _KeyBoard extends InputDevice {
    constructor();
}
const kb = new _KeyBoard();
const keyboard = kb;
declare class World {
    constructor(timeStep?: number, velocityIterations: number = 8, positionIterations: number = 3);
    
    allowSleeping: boolean;
    gravity: {
        x: number,
        y: number
    }
    velocityThreshold: number;

    getSpriteAt(x: number, y: number, group?: Group): Sprite;
    step(timestep?: number, velocityIterations?: number, positionIterations?: number);
}
let world: World;

declare function clear(): void;