declare class Sprite {
    constructor(x?: number, y?: number, 
                w?: number, h?: number, 
                collider?: "dynamic" | "static" | "kinematic" | "none" | "d" | "s" | "k" | "n");
    collider: "dynamic" | "static" | "kinematic" | "none" | "d" | "s" | "k" | "n";
    allowSleeping: boolean;
    bearing: number;
    color: p5.color;
    colour: p5.colour;
    debug: boolean;
    drag: number;
    direction: number;
    halfHeight: number;
    halfWidth: number;
    height: number;
    mass: number;
    rotation: number;
    rotationDrag: number;
    rotationSpeed: number;
    speed: number;
    velocity: Vector;
    visible: boolean;
    width: number;
    x: number;
    y: number;

    angleToFace(x: number, y: number, facing?: number): number;
    applyForce(amount: number, origin?: Vector): void;
    addCollider(offsetX: number, offsetY: number, w: number, h?: number): void;
    moveTo(angleOrPosition: number|object, speed?: number, facing?: number): Promise;
    overlaps(ratget: Sprite|Group, callback?: function): boolean;
    remove(): void;
    rotateTo(direction: number|{x: number, y: number}, speed: number = 1, facing: number = 0): promise;
}

declare class Group {
    constructor();

    Sprite: new (
        x?: number, y?: number,
        w?: number, h?: number,
        collider?: "dynamic" | "static" | "kinematic" | "none" | "d" | "s" | "k" | "n"
    ) => Sprite;

    Group: new () => Group;
    
    bearing: number;
    drag: number;
    direction: number;
    rotationSpeed: number;
    speed: number | boolean;

    applyForce(amount: number, origin?: Vector): void;
}

declare class Joint {
    constructor(spriteA: Sprite, spriteB: Sprite, type?: string);

    collideConnected: boolean;
    damping: number;
    draw: function;
    enableMotor: boolean
    maxPower: number;
    power: number;
    speed: number;
    springiness: number;

    remove(): void;
}
declare class GlueJoint extends Joint {
}

declare class WheelJoint extends Joint {
    constructor(spriteA: Sprite, spriteB: Sprite);
}

declare class InputDevice {
    constructor();
    held(inp: string): boolean;
    holding(inp: string): number;
    holds(inp: string): boolean;
    pressed(inp: string): boolean;
    presses(inp: string): boolean;
    pressing(inp: string): number;
    released(inp: string): boolean;
}
declare class _KeyBoard extends InputDevice {
    constructor();
}
const kb = new _KeyBoard();
const keyboard = kb;
declare class World {
    constructor(timeStep?: number, velocityIterations: number = 8, positionIterations: number = 3);
    
    allowSleeping: boolean;
    gravity: {
        x: number,
        y: number
    }
    velocityThreshold: number;

    getSpriteAt(x: number, y: number, group?: Group): Sprite;
    step(timestep?: number, velocityIterations?: number, positionIterations?: number);
}
let world: World;

declare function clear(): void;